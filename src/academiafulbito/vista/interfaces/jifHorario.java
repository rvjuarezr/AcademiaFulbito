/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifHorario.java
 *
 * Created on 02/09/2024, 09:57:06 PM
 */

package academiafulbito.vista.interfaces;

import academiafulbito.controlador.beans.CanchaFacade;
import academiafulbito.controlador.beans.CategoriaFacade;
import academiafulbito.controlador.beans.HorarioFacade;
import academiafulbito.controlador.beans.ProfesorFacade;
import academiafulbito.modelo.entidades.Horario;
import academiafulbito.modelo.enums.Dia;
import academiafulbito.modelo.enums.Estado;
import academiafulbito.vista.reportes.Reportes;
import academiafulbito.vista.utilidades.DialogUtils;
import academiafulbito.vista.utilidades.LiteralesTexto;
import academiafulbito.vista.utilidades.Utils;
import java.sql.Time;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Ronald J
 */
public class jifHorario extends javax.swing.JInternalFrame {

    /** Creates new form jifHorario */
    JDesktopPane jDesktopPane;

    int indicador;//para saber si estamos en modo de edicion
    private int idSeleccionada; // Variable para almacenar la ID seleccionada
    private int paginaActual = 1;
    private int tamanioPagina = 5;//para el paginado de tabla
    private int totalPaginas;
    jifProfesores menuProfesores;
    jifCanchas menuCanchas;
    public static HorarioFacade horarioFacade;
    public static int permiteSelFila = -1;//este valor no permite seleccionar la fila en la tabla
    public static CategoriaFacade categoriaFacade;
    public static ProfesorFacade profesorFacade;
    public static CanchaFacade canchaFacade;
    DefaultTableModel modelo;
    String[] nombreColumnas = {
        LiteralesTexto.LITERAL_ID,
        LiteralesTexto.LITERAL_DIA,
        LiteralesTexto.LITERAL_HORA_INI,
        LiteralesTexto.LITERAL_HORA_FIN,
        LiteralesTexto.LITERAL_ID,//4 profesor
        LiteralesTexto.LITERAL_NOMBRE,
        LiteralesTexto.LITERAL_APELLIDO,
        LiteralesTexto.LITERAL_ID,//7 categoria
        LiteralesTexto.LITERAL_COLUMNA_CATEGORIA,
        LiteralesTexto.LITERAL_ID,//9 cancha
        LiteralesTexto.LITERAL_COLUMNA_CANCHA,
        LiteralesTexto.LITERAL_ESTADO,
        LiteralesTexto.LITERAL_VER,
        LiteralesTexto.LITERAL_EDITAR,
        LiteralesTexto.LITERAL_ELIMINAR
    };

    public jifHorario(JDesktopPane jdpModAF) {
        initComponents();
        jDesktopPane = jdpModAF;
        Utils.cargarComboDiasDeLaSemana(jcbDiasDeLaSemana);
        Utils.cargarComboEstado(jcbEstado);
        accionBotones(false, false, false, false, false);
        horarioFacade = new HorarioFacade();
        categoriaFacade = new CategoriaFacade();
        profesorFacade = new ProfesorFacade();
        canchaFacade = new CanchaFacade();
        listarHorarios(paginaActual, tamanioPagina);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tphHorarios = new javax.swing.JTabbedPane();
        jpListado = new javax.swing.JPanel();
        btnNuevoHorario = new org.edisoncor.gui.button.ButtonRound();
        lblPaginaActual = new javax.swing.JLabel();
        btnAnterior = new org.edisoncor.gui.button.ButtonRound();
        btnSiguiente = new org.edisoncor.gui.button.ButtonRound();
        jspHorarios = new javax.swing.JScrollPane();
        tblHorarios = new javax.swing.JTable();
        btnRepCanchasPorLugaEnt = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jsHoraFin = new javax.swing.JSpinner(new SpinnerDateModel());
        jsHoraInicio = new javax.swing.JSpinner(new SpinnerDateModel());
        txtNombreProfesor = new org.edisoncor.gui.textField.TextFieldRoundBackground();
        txtIdProfesor = new org.edisoncor.gui.textField.TextFieldRoundBackground();
        btnBucarProfesor = new javax.swing.JButton();
        btnBuscarCategoria = new javax.swing.JButton();
        txtNombreCategoria = new org.edisoncor.gui.textField.TextFieldRoundBackground();
        txtIdCategoria = new org.edisoncor.gui.textField.TextFieldRoundBackground();
        txtIdCancha = new org.edisoncor.gui.textField.TextFieldRoundBackground();
        btnBuscarCancha = new javax.swing.JButton();
        txtNombreCancha = new org.edisoncor.gui.textField.TextFieldRoundBackground();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new org.edisoncor.gui.button.ButtonRound();
        jcbEstado = new org.edisoncor.gui.comboBox.ComboBoxRound();
        jPanel4 = new javax.swing.JPanel();
        jcbDiasDeLaSemana = new org.edisoncor.gui.comboBox.ComboBoxRound();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));
        setClosable(true);
        setTitle("MANTENIMIENTO HORARIOS");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tphHorarios.setFont(new java.awt.Font("Bookman Old Style", 1, 24));

        jpListado.setBackground(new java.awt.Color(255, 255, 255));
        jpListado.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNuevoHorario.setBackground(new java.awt.Color(156, 156, 247));
        btnNuevoHorario.setText("+ HORARIO");
        btnNuevoHorario.setFont(new java.awt.Font("Arial", 1, 18));
        btnNuevoHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoHorarioActionPerformed(evt);
            }
        });
        jpListado.add(btnNuevoHorario, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 10, 140, 50));

        lblPaginaActual.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        lblPaginaActual.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPaginaActual.setText("10");
        jpListado.add(lblPaginaActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 330, 220, 50));

        btnAnterior.setBackground(new java.awt.Color(204, 204, 204));
        btnAnterior.setForeground(new java.awt.Color(51, 51, 51));
        btnAnterior.setText("<<");
        btnAnterior.setFont(new java.awt.Font("Arial", 1, 24));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        jpListado.add(btnAnterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 330, -1, 50));

        btnSiguiente.setBackground(new java.awt.Color(204, 204, 204));
        btnSiguiente.setForeground(new java.awt.Color(51, 51, 51));
        btnSiguiente.setText(">>");
        btnSiguiente.setFont(new java.awt.Font("Arial", 1, 24));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        jpListado.add(btnSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 330, -1, 50));

        tblHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblHorarios.setOpaque(false);
        tblHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHorariosMouseClicked(evt);
            }
        });
        jspHorarios.setViewportView(tblHorarios);

        jpListado.add(jspHorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 1130, 230));

        btnRepCanchasPorLugaEnt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/academiafulbito/vista/imagenes/imprimir-pdf.png"))); // NOI18N
        btnRepCanchasPorLugaEnt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        btnRepCanchasPorLugaEnt.setContentAreaFilled(false);
        btnRepCanchasPorLugaEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepCanchasPorLugaEntActionPerformed(evt);
            }
        });
        jpListado.add(btnRepCanchasPorLugaEnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 120, 70));

        tphHorarios.addTab("LISTADO", jpListado);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel1.setForeground(new java.awt.Color(103, 98, 98));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NUEVO HORARIO");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 360, 20));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ELIGE TU HORARIO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 1, 18), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JSpinner.DateEditor timeEditorHF = new JSpinner.DateEditor(jsHoraFin, "HH:mm");
        jsHoraFin.setEditor(timeEditorHF);
        jsHoraFin.setValue(new java.util.Date()); // valor inicial
        jsHoraFin.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jsHoraFin.setEnabled(false);
        jPanel3.add(jsHoraFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 160, 40));

        JSpinner.DateEditor timeEditorHI = new JSpinner.DateEditor(jsHoraInicio, "HH:mm");
        jsHoraInicio.setEditor(timeEditorHI);
        jsHoraInicio.setValue(new java.util.Date()); // valor inicial
        jsHoraInicio.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jsHoraInicio.setEnabled(false);
        jPanel3.add(jsHoraInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 170, 40));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 620, 80));

        txtNombreProfesor.setEditable(false);
        txtNombreProfesor.setDescripcion("Nombre Profesor*");
        txtNombreProfesor.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        txtNombreProfesor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreProfesorKeyTyped(evt);
            }
        });
        jPanel2.add(txtNombreProfesor, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 450, 50));

        txtIdProfesor.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtIdProfesor.setEditable(false);
        txtIdProfesor.setDescripcion("Id*");
        txtIdProfesor.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        txtIdProfesor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdProfesorKeyTyped(evt);
            }
        });
        jPanel2.add(txtIdProfesor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 110, 50));

        btnBucarProfesor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/academiafulbito/vista/imagenes/buscar.png"))); // NOI18N
        btnBucarProfesor.setBorderPainted(false);
        btnBucarProfesor.setContentAreaFilled(false);
        btnBucarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBucarProfesorActionPerformed(evt);
            }
        });
        jPanel2.add(btnBucarProfesor, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 240, 60, 50));

        btnBuscarCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/academiafulbito/vista/imagenes/buscar.png"))); // NOI18N
        btnBuscarCategoria.setBorderPainted(false);
        btnBuscarCategoria.setContentAreaFilled(false);
        btnBuscarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCategoriaActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 320, 60, 50));

        txtNombreCategoria.setEditable(false);
        txtNombreCategoria.setDescripcion("Nombre Categoria*");
        txtNombreCategoria.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        txtNombreCategoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreCategoriaKeyTyped(evt);
            }
        });
        jPanel2.add(txtNombreCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, 450, 50));

        txtIdCategoria.setEditable(false);
        txtIdCategoria.setDescripcion("Id*");
        txtIdCategoria.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        txtIdCategoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdCategoriaKeyTyped(evt);
            }
        });
        jPanel2.add(txtIdCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 320, 110, 50));

        txtIdCancha.setEditable(false);
        txtIdCancha.setDescripcion("Id*");
        txtIdCancha.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        txtIdCancha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdCanchaKeyTyped(evt);
            }
        });
        jPanel2.add(txtIdCancha, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 110, 50));

        btnBuscarCancha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/academiafulbito/vista/imagenes/buscar.png"))); // NOI18N
        btnBuscarCancha.setBorderPainted(false);
        btnBuscarCancha.setContentAreaFilled(false);
        btnBuscarCancha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCanchaActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarCancha, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 400, 60, 50));

        txtNombreCancha.setEditable(false);
        txtNombreCancha.setDescripcion("Nombre Cancha*");
        txtNombreCancha.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        txtNombreCancha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreCanchaKeyTyped(evt);
            }
        });
        jPanel2.add(txtNombreCancha, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, 450, 50));

        btnCancelar.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/academiafulbito/vista/imagenes/volver.png"))); // NOI18N
        btnCancelar.setText("VOLVER");
        btnCancelar.setContentAreaFilled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel2.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 270, 220, 70));

        btnGuardar.setBackground(new java.awt.Color(156, 156, 247));
        btnGuardar.setBorder(null);
        btnGuardar.setText("AÑADIR");
        btnGuardar.setBorderPainted(true);
        btnGuardar.setContentAreaFilled(true);
        btnGuardar.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel2.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 170, 170, 70));

        jcbEstado.setEnabled(false);
        jcbEstado.setFont(new java.awt.Font("Bookman Old Style", 1, 18));
        jPanel2.add(jcbEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 460, 220, 40));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Elige tu Dia", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 0, 18))); // NOI18N
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jcbDiasDeLaSemana.setEnabled(false);
        jcbDiasDeLaSemana.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jPanel4.add(jcbDiasDeLaSemana, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 550, 50));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 620, 80));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel5.setText("DATOS DE LA CANCHA QUE PERTENECE:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 370, 320, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel6.setText("DATOS DEL PROFESOR QUE PERTENECE:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 320, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel7.setText("DATOS DE LA CATEGORIA QUE PERTENECE:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 320, 30));

        tphHorarios.addTab("REGISTRO", jPanel2);

        getContentPane().add(tphHorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnNuevoHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoHorarioActionPerformed
        // TODO add your handling code here:
        indicador = 0;//para poder guardar
        tphHorarios.setSelectedIndex(1);
        limpiarCampos();
        habilitarCampos(true);
        accionBotones(true, true, true, true, true);
}//GEN-LAST:event_btnNuevoHorarioActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        if (paginaActual > 1) {
            paginaActual--;
            //listarCategorias(Utils.cargarPaginado(paginaActual, tamanioPagina, lblPaginaActual, jfPrincipal.menuCategorias));
            //listarCategorias(paginaActual, tamanioPagina);
        }
}//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        if (paginaActual < totalPaginas) {
            paginaActual++;
            //listarCategorias(paginaActual, tamanioPagina);
        }
}//GEN-LAST:event_btnSiguienteActionPerformed

    private void txtNombreProfesorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreProfesorKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        evt.setKeyChar(Character.toUpperCase(c)); // Convertir a mayúsculas
}//GEN-LAST:event_txtNombreProfesorKeyTyped

    private void txtIdProfesorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdProfesorKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdProfesorKeyTyped

    private void txtNombreCategoriaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreCategoriaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreCategoriaKeyTyped

    private void txtIdCategoriaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdCategoriaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdCategoriaKeyTyped

    private void txtIdCanchaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdCanchaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdCanchaKeyTyped

    private void txtNombreCanchaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreCanchaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreCanchaKeyTyped

    private void btnBuscarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCategoriaActionPerformed
        // TODO add your handling code here:
        // Si el internalFrame de categorías no existe o está cerrado, lo instanciamos
        if (jfPrincipal.menuCategorias == null || jfPrincipal.menuCategorias.isClosed()) {
            jfPrincipal.menuCategorias = new jifCategorias(jDesktopPane); // Instanciamos la ventana de Categorías
            // Llamamos al método para gestionar la visualización
            Utils.visualizarInternalFrame(jfPrincipal.menuCategorias, jDesktopPane);
        }
        jfPrincipal.menuCategorias.permiteSelFila=1;//este valor permite seleccionar con un clic en la fila de la tabla de categoria
        jfPrincipal.menuCategorias.toFront(); // Traer al frente
    }//GEN-LAST:event_btnBuscarCategoriaActionPerformed

    private void btnBucarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBucarProfesorActionPerformed
        // TODO add your handling code here:
        if(jfPrincipal.menuProfesores == null || jfPrincipal.menuProfesores.isClosed()){
            jfPrincipal.menuProfesores = new jifProfesores(jDesktopPane);
            Utils.visualizarInternalFrame(jfPrincipal.menuProfesores, jDesktopPane);
        }
        jfPrincipal.menuProfesores.permiteSelFila=0;//este valor permite seleccionar con un clic en la fila de la tabla de profesores
        jfPrincipal.menuProfesores.toFront();
    }//GEN-LAST:event_btnBucarProfesorActionPerformed

    private void btnBuscarCanchaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCanchaActionPerformed
        // TODO add your handling code here:
        if(jfPrincipal.menuCanchas == null || jfPrincipal.menuCanchas.isClosed()){
            jfPrincipal.menuCanchas = new jifCanchas(jDesktopPane);
            Utils.visualizarInternalFrame(jfPrincipal.menuCanchas, jDesktopPane);
        }
        jfPrincipal.menuCanchas.permiteSelFila = 0;
        jfPrincipal.menuCanchas.toFront();
    }//GEN-LAST:event_btnBuscarCanchaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
        habilitarCampos(false);
        tphHorarios.setSelectedIndex(0);
        accionBotones(false, false, false, false, false);
}//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        try {
            //if (validarDatosCategoria()) {
            String cadenaMensaje = 0 == indicador ? LiteralesTexto.ESTA_SEGURO_GUARDAR_NUEVO_REGISTRO : LiteralesTexto.ESTA_SEGURO_MODIFICAR_REGISTRO;
            if (Utils.mensajeConfirmacion(cadenaMensaje) == JOptionPane.YES_OPTION) {
                Horario horario;
                switch (indicador) {
                    case 0://registrar horario
                        horario = new Horario();
                        horarioFacade.guardarHorario(getDatosHorario(horario));
                        Utils.mensajeInformacion(LiteralesTexto.REGISTRO_GUARDADO_CORRECTAMENTE);
                        break;
                    case 1://actualizar horario
                        horario = horarioFacade.findHorarioById(idSeleccionada);
                        if(horario != null){
                            horarioFacade.actualizarHorario(getDatosHorario(horario));
                            Utils.mensajeInformacion(LiteralesTexto.REGISTRO_ACTUALIZADO_CORRECTAMENTE);

                        } else{
                            Utils.mensajeError(LiteralesTexto.ERROR_AL_ACTUALIZAR_EL_REGISTRO);
                        }
                        
                        break;
                }

                listarHorarios(paginaActual, tamanioPagina);
                limpiarCampos();
                habilitarCampos(false);
                accionBotones(false, false, false, false, false);
                btnGuardar.setText("Añadir");
                indicador = 0;
                tphHorarios.setSelectedIndex(0);
            }
            //}
        } catch (Exception ex) {
            ex.printStackTrace();
        }

}//GEN-LAST:event_btnGuardarActionPerformed

    private void tblHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHorariosMouseClicked
        // TODO add your handling code here:
                switch(permiteSelFila){
            case 0:
                int seleccionFila=tblHorarios.getSelectedRow();
                if(seleccionFila!=-1){
                    int idHorario=Integer.parseInt(tblHorarios.getValueAt(seleccionFila,0).toString());
                    Horario miHorario=horarioFacade.findHorarioById(idHorario);
                    jfPrincipal.menuMatricula.txtIdHorario.setText(""+miHorario.getIdHorario());
                    jfPrincipal.menuMatricula.txtDiasHorarioProf.setText(miHorario.getDia()+" "+miHorario.getHoraInicio().toString()+"-"+miHorario.getHoraFin().toString());
                    jfPrincipal.menuMatricula.txtLugarEntrenamiento.setText(miHorario.getCancha().getId_lugar().getNombre());
                    jfPrincipal.menuMatricula.txtCancha.setText(miHorario.getCancha().getNombre());
                    jfPrincipal.menuMatricula.txtNombresProf.setText(miHorario.getProfesor().getNombreProfesor()+" "+miHorario.getProfesor().getApellidoProfesor());
                    jfPrincipal.menuMatricula.txtTelefProfesor.setText(miHorario.getProfesor().getTelefono());
                }
                try{
                    setClosed(true);
                } catch(Exception ex){
                    ex.printStackTrace();
                }
                break;
        }

    }//GEN-LAST:event_tblHorariosMouseClicked

    private void btnRepCanchasPorLugaEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepCanchasPorLugaEntActionPerformed
        // TODO add your handling code here:
        // Definir los parámetros necesarios para el reporte
        Map parametros = new HashMap();
        // Llamar al método para generar y mostrar el reporte
        Reportes.imprimirReporte(parametros, "rp_horarios_por_canchas.jasper");
}//GEN-LAST:event_btnRepCanchasPorLugaEntActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonRound btnAnterior;
    private javax.swing.JButton btnBucarProfesor;
    private javax.swing.JButton btnBuscarCancha;
    private javax.swing.JButton btnBuscarCategoria;
    private javax.swing.JButton btnCancelar;
    private org.edisoncor.gui.button.ButtonRound btnGuardar;
    private org.edisoncor.gui.button.ButtonRound btnNuevoHorario;
    private javax.swing.JButton btnRepCanchasPorLugaEnt;
    private org.edisoncor.gui.button.ButtonRound btnSiguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private org.edisoncor.gui.comboBox.ComboBoxRound jcbDiasDeLaSemana;
    private org.edisoncor.gui.comboBox.ComboBoxRound jcbEstado;
    private javax.swing.JPanel jpListado;
    private javax.swing.JSpinner jsHoraFin;
    private javax.swing.JSpinner jsHoraInicio;
    private javax.swing.JScrollPane jspHorarios;
    private javax.swing.JLabel lblPaginaActual;
    private javax.swing.JTable tblHorarios;
    private javax.swing.JTabbedPane tphHorarios;
    public static org.edisoncor.gui.textField.TextFieldRoundBackground txtIdCancha;
    public static org.edisoncor.gui.textField.TextFieldRoundBackground txtIdCategoria;
    public static org.edisoncor.gui.textField.TextFieldRoundBackground txtIdProfesor;
    public static org.edisoncor.gui.textField.TextFieldRoundBackground txtNombreCancha;
    public static org.edisoncor.gui.textField.TextFieldRoundBackground txtNombreCategoria;
    public static org.edisoncor.gui.textField.TextFieldRoundBackground txtNombreProfesor;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos(){
        jcbDiasDeLaSemana.setSelectedIndex(0);
        jsHoraInicio.setValue(new java.sql.Time(System.currentTimeMillis()));
        jsHoraFin.setValue(new java.sql.Time(System.currentTimeMillis()));
        txtIdProfesor.setText(LiteralesTexto.LITERAL_CADENA_VACIA);
        txtNombreProfesor.setText(LiteralesTexto.LITERAL_CADENA_VACIA);
        txtIdCategoria.setText(LiteralesTexto.LITERAL_CADENA_VACIA);
        txtNombreCategoria.setText(LiteralesTexto.LITERAL_CADENA_VACIA);
        txtIdCancha.setText(LiteralesTexto.LITERAL_CADENA_VACIA);
        txtNombreCancha.setText(LiteralesTexto.LITERAL_CADENA_VACIA);
    }

    private void habilitarCampos(boolean band){
        if(indicador == 0){
            jcbDiasDeLaSemana.setSelectedIndex(0);
            jcbDiasDeLaSemana.setEnabled(band);
        } else{
            jcbDiasDeLaSemana.setEnabled(band);
        }
        jsHoraInicio.setEnabled(band);
        jsHoraFin.setEnabled(band);
        txtIdProfesor.setEditable(band);
        txtNombreProfesor.setEditable(band);
        txtIdCategoria.setEditable(band);
        txtNombreCategoria.setEditable(band);
        txtIdCancha.setEditable(band);
        txtNombreCancha.setEditable(band);
    }

    private void accionBotones(boolean a, boolean b, boolean c, boolean d, boolean e) {
        btnCancelar.setEnabled(a);
        btnGuardar.setEnabled(b);
        btnBucarProfesor.setEnabled(c);
        btnBuscarCategoria.setEnabled(d);
        btnBuscarCancha.setEnabled(e);
    }

    private Horario getDatosHorario(Horario horario){

        horario.setCancha(canchaFacade.findCanchaById(Integer.parseInt(txtIdCancha.getText())));
        horario.setCategoria(categoriaFacade.findCategoriaById(Integer.parseInt(txtIdCategoria.getText())));
        horario.setDia((Dia)jcbDiasDeLaSemana.getSelectedItem());
        Date fechaInicio = (Date) jsHoraInicio.getValue();
        horario.setHoraInicio(new Time(fechaInicio.getTime()));
        Date fechaFin = (Date) jsHoraFin.getValue();
        horario.setHoraFin(new Time(fechaFin.getTime()));
        horario.setProfesor(profesorFacade.findProfesorById(Integer.parseInt(txtIdProfesor.getText())));
        horario.setEstado((Estado)jcbEstado.getSelectedItem());
        return horario;
    }

    private void listarHorarios(int paginaActual, int tamanioPagina) {
        totalPaginas = horarioFacade.obtenerTotalPaginas(tamanioPagina);

        List<Horario> listaHorarios = horarioFacade.listarEntidadesPaginadas(paginaActual, tamanioPagina);

        // Actualizar el JLabel con la página actual
        lblPaginaActual.setText("Página " + paginaActual + " de " + totalPaginas);

        // Mostrar las canchas en la tabla
        listarHorarios(listaHorarios);
        actualizarEstadoBotones();// Actualizar el estado de los botones

    }

    private void actualizarEstadoBotones() {
        btnAnterior.setEnabled(paginaActual > 1);
        btnSiguiente.setEnabled(paginaActual < totalPaginas);
    }

    private void listarHorarios(List<Horario> listaHorario){
        // Selecciona el primer tab en un JTabbedPane
        tphHorarios.setSelectedIndex(0);

        modelo = Utils.generarModeloTabla(nombreColumnas);

        // Asignar el modelo a la tabla
        tblHorarios.setModel(modelo);
        // Asegurar que la cabecera de la tabla se muestre y se mueva
        jspHorarios.setColumnHeaderView(tblHorarios.getTableHeader());

        int[] anchoColumnas = {15, 20, 20, 20,10,30,30,10,20,10,50,15, 10, 13, 15}; // Anchos específicos para cada columna
        Utils.setAnchoColumnas(tblHorarios, anchoColumnas);
        Utils.ocultarColumnas(tblHorarios, 0);//ocultar la primera columna
        Utils.ocultarColumnas(tblHorarios, 4);//profesor
        Utils.ocultarColumnas(tblHorarios, 5);
        Utils.ocultarColumnas(tblHorarios, 6);
        Utils.ocultarColumnas(tblHorarios, 7);//categoria
        Utils.ocultarColumnas(tblHorarios, 8);
        Utils.ocultarColumnas(tblHorarios, 9);
        Utils.ocultarColumnas(tblHorarios, 11);

        // limpia los datos existentes en la tabla.
        Utils.limpiarModeloTabla(modelo, tblHorarios);

        // Verificar si la lista de socios tiene elementos
        if (listaHorario.size() > 0) {

            // Iterar sobre la lista de canchas y agregar cada cancha a la tabla
            for (Horario horario : listaHorario) {

                // Crea un array de objetos con los datos de la cancha para agregar a la tabla.
                Object[] fila = new Object[]{
                    horario.getIdHorario(),
                    horario.getDia(),
                    horario.getHoraInicio(),
                    horario.getHoraFin(),
                    horario.getProfesor().getIdProfesor(),
                    horario.getProfesor().getNombreProfesor(),
                    horario.getProfesor().getApellidoProfesor(),
                    horario.getCategoria().getIdCategoria(),
                    horario.getCategoria().getNombre(),
                    horario.getCancha().getIdCancha(),
                    horario.getCancha().getNombre(),
                    horario.getEstado(),
                    LiteralesTexto.LITERAL_VER,
                    LiteralesTexto.LITERAL_EDITAR,
                    LiteralesTexto.LITERAL_ELIMINAR
                };
                modelo.addRow(fila); // Agregar la fila al modelo de la tabla
            }
            // Establece un renderizador personalizado para las celdas de la tabla.
            tblHorarios.setDefaultRenderer(Object.class, new Utils(14));

            // Establece el modo de selección de filas para permitir solo una selección a la vez.
            tblHorarios.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            Utils.configurarEstiloTabla(tblHorarios, jspHorarios);
            Utils.configurarBotonesAccion(tblHorarios);

            
        }
    }

    public void mostrarInformacionHorario(int filaSeleccionada) {

        // Supongamos que tienes un modelo de tabla que almacena los datos.
        Dia diaHorario = (Dia) tblHorarios.getValueAt(filaSeleccionada, 1); // Ajusta el índice de columna según tu tabla
        String horaInicio = (String)tblHorarios.getValueAt(filaSeleccionada, 2).toString();
        String horaFin = (String)tblHorarios.getValueAt(filaSeleccionada, 3).toString();
        String nombreProfesor = (String)tblHorarios.getValueAt(filaSeleccionada, 5).toString();
        String apellidosProfesor = (String)tblHorarios.getValueAt(filaSeleccionada, 6).toString();
        String nombreCategoria = (String)tblHorarios.getValueAt(filaSeleccionada, 8).toString();
        String nombreCancha = (String)tblHorarios.getValueAt(filaSeleccionada, 10).toString();
        Estado estado = (Estado)tblHorarios.getValueAt(filaSeleccionada, 11);

        // Crear un mapa con los datos a mostrar
        Map<String, String> datos = new LinkedHashMap<String, String>(9);
        datos.put("Dia: ", diaHorario.toString());
        datos.put("Hora Inicio: ", horaInicio);
        datos.put("Hora Fin: ", horaFin);
        datos.put("Nombre Profesor: ", nombreProfesor);
        datos.put("Apellidos Profesor: ", apellidosProfesor);
        datos.put("Nombre Categoria: ", nombreCategoria);
        datos.put("Nombre Cancha: ", nombreCancha);
        datos.put("Estado: ", estado.toString());

        // Llamar al método genérico para mostrar la información
        //primer parametro: nombre de tu boton, cuarto parametro: tamaño letra y ultimo parametro es la longitud de la cadena
        DialogUtils.mostrarInformacion("Aceptar","INFORMACIÓN DE HORARIOS", datos, 18, 20);
    }

    public void eliminarHorarioSeleccionado(int filaSeleccionada) {
        if (filaSeleccionada != -1) {
            // Capturar la ID de la fila seleccionada
            System.out.println("filaSeleccionada: "+filaSeleccionada);
            idSeleccionada = Integer.parseInt(tblHorarios.getValueAt(filaSeleccionada, 0).toString()); // Supone que la ID está en la primera columna
            if (Utils.mensajeConfirmacion(LiteralesTexto.ESTA_SEGURO_ELIMINAR_REGISTRO) == JOptionPane.YES_OPTION) {
                Horario horarioAEliminar = horarioFacade.findHorarioById(idSeleccionada);
                if(horarioAEliminar != null){
                    try {
                        // Llamar al método para eliminar
                        horarioFacade.eliminarHorario(horarioAEliminar);
                        JOptionPane.showMessageDialog(this, LiteralesTexto.REGISTRO_ELIMINADO_CORRECTAMENTE);

                        // Actualizar la tabla después de eliminar
                        totalPaginas = horarioFacade.obtenerTotalPaginas(tamanioPagina);

                        // Verificar si la página actual es mayor que el total de páginas después de la eliminación
                        if (paginaActual > totalPaginas) {
                            paginaActual = totalPaginas; // Ajustar la página actual a la última disponible
                        }

                        // Actualizar la tabla después de eliminar
                        listarHorarios(paginaActual, tamanioPagina); // Volver a listar después de la eliminación

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, LiteralesTexto.ERROR_AL_ELIMINAR_EL_REGISTRO+ " : " + e.getMessage(), LiteralesTexto.LITERAL_ERROR, JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, LiteralesTexto.REGISTRO_NO_ENCONTRADO_EN_LA_BBDD, LiteralesTexto.LITERAL_ERROR, JOptionPane.ERROR_MESSAGE);
                }

            }
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, LiteralesTexto.POR_FAVOR_SELECCIONE_UNA_REGISTRO_PARA_ELIMINAR);
        }
    }

    public void editarHorarioSeleccionado(int row) throws ParseException {
        if (row != -1) {
            // Capturar la ID de la fila seleccionada
            idSeleccionada = Integer.parseInt(tblHorarios.getValueAt(row, 0).toString()); // Supone que la ID está en la primera columna

            // Obtener los datos de la fila seleccionada
            Dia diaHorario = (Dia) tblHorarios.getValueAt(row, 1); // Ajusta el índice de columna según tu tabla
            String horaInicio = (String)tblHorarios.getValueAt(row, 2).toString();
            String horaFin = (String)tblHorarios.getValueAt(row, 3).toString();
            String idProfesor = (String)tblHorarios.getValueAt(row, 4).toString();
            String nombreProfesor = (String)tblHorarios.getValueAt(row, 5).toString();
            String apellidosProfesor = (String)tblHorarios.getValueAt(row, 6).toString();
            String idCategoria = (String)tblHorarios.getValueAt(row, 7).toString();
            String nombreCategoria = (String)tblHorarios.getValueAt(row, 8).toString();
            String idCancha = (String)tblHorarios.getValueAt(row, 9).toString();
            String nombreCancha = (String)tblHorarios.getValueAt(row, 10).toString();
            Estado estado = (Estado)tblHorarios.getValueAt(row, 11);

            // Asignar los datos a los JTextField en el segundo panel
            jcbDiasDeLaSemana.setSelectedItem(diaHorario);
            jsHoraInicio.setValue(Utils.getTime(horaInicio));
            jsHoraFin.setValue(Utils.getTime(horaFin));
            txtIdProfesor.setText(idProfesor);
            txtNombreProfesor.setText(nombreProfesor+" "+apellidosProfesor);
            txtIdCategoria.setText(idCategoria);
            txtNombreCategoria.setText(nombreCategoria);
            txtIdCancha.setText(idCancha);
            txtNombreCancha.setText(nombreCancha);

            // Seleccionar el estado en el JComboBox
            jcbEstado.setSelectedItem(estado);

            // Cambiar al segundo panel donde están los JTextField
            tphHorarios.setSelectedIndex(1);
            btnGuardar.setText("Modificar");
            indicador = 1;
            accionBotones(true, true, true, true, true);
            habilitarCampos(true);
        } else {
            //colocar alguna alerta
        }
    }
}